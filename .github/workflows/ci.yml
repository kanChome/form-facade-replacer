name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION_MATRIX: "1.21"

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m --issues-exit-code=0

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå The following files are not properly formatted:"
            gofmt -s -l .
            echo "Please run: gofmt -s -w ."
            exit 1
          else
            echo "‚úÖ All Go files are properly formatted"
          fi

      - name: Run go vet
        run: go vet ./...

  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.21"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests with Go ${{ matrix.go-version }} on ${{ matrix.os }}"
          go test -v -race -coverprofile=coverage.out ./...

      - name: Display test summary
        run: |
          echo "üìä Test Results Summary:"
          go test -v ./... | grep -E "(PASS|FAIL|RUN)"

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}

  # Blade „Éï„Ç°„Ç§„É´Áµ±Âêà„ÉÜ„Çπ„Éà
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run integration tests
        run: |
          echo "üîÑ Running integration tests"
          go test -v -run TestDirectoryProcessingIntegration ./...

  # „Éì„É´„ÉâÊ§úË®º - „ÇØ„É≠„Çπ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, integration-tests]

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "üèóÔ∏è Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            go build -o form-facade-replacer-${{ matrix.goos }}-${{ matrix.goarch }}.exe .
          else
            go build -o form-facade-replacer-${{ matrix.goos }}-${{ matrix.goarch }} .
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: form-facade-replacer-${{ matrix.goos }}-${{ matrix.goarch }}
          path: form-facade-replacer-*

  # „ÉÜ„Çπ„ÉàÁµ±Ë®à„Å®„Çµ„Éû„É™„Éº
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, integration-tests, build]
    if: always()

    steps:
      - name: Display overall status
        run: |
          echo "üéâ CI/CD Pipeline Summary"
          echo "========================"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.test.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo ""

          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed! Ready for deployment."
          else
            echo "‚ùå Some checks failed. Please review the logs."
            exit 1
          fi
